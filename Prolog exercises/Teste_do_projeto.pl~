espaco_fila(F,Result) :- espaco_fila(F,[],Result).

% at list end, the result is what's in the accumulator

espaco_fila([],Acc,Acc).

% not on an #, accumulate, recurse

espaco_fila([R|Rs],Acc,Result) :-
   R \== #,
   !,
   append(Acc,[R],NextAcc),
   espaco_fila(Rs,NextAcc,Result).

% hit a # and accumulator has > 3 atoms, then the result is what's in
% the accumulator

espaco_fila([#|_],Acc,Acc) :-
   length(Acc,L),
   L >= 3.

% ALTERNATIVELY (on retry or length too small), the (next) result is
% what's being generated by a recursive call. This behaves as if the
% clause above had never even happened (really as in Greg Egan's "Quarantine")

espaco_fila([#|R],_,Result) :-
   espaco_fila(R,[],Result).
